/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: OraProtoBuf.proto */

#ifndef PROTOBUF_C_OraProtoBuf_2eproto__INCLUDED
#define PROTOBUF_C_OraProtoBuf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct OpenLogReplicator__Pb__Value OpenLogReplicator__Pb__Value;
typedef struct OpenLogReplicator__Pb__Column OpenLogReplicator__Pb__Column;
typedef struct OpenLogReplicator__Pb__Schema OpenLogReplicator__Pb__Schema;
typedef struct OpenLogReplicator__Pb__Payload OpenLogReplicator__Pb__Payload;
typedef struct OpenLogReplicator__Pb__SchemaRequest OpenLogReplicator__Pb__SchemaRequest;
typedef struct OpenLogReplicator__Pb__RedoRequest OpenLogReplicator__Pb__RedoRequest;
typedef struct OpenLogReplicator__Pb__RedoResponse OpenLogReplicator__Pb__RedoResponse;


/* --- enums --- */

typedef enum _OpenLogReplicator__Pb__Op {
  /*
   *begin
   */
  OPEN_LOG_REPLICATOR__PB__OP__BEGIN = 0,
  /*
   *commit
   */
  OPEN_LOG_REPLICATOR__PB__OP__COMMIT = 1,
  /*
   *c
   */
  OPEN_LOG_REPLICATOR__PB__OP__INSERT = 2,
  /*
   *u
   */
  OPEN_LOG_REPLICATOR__PB__OP__UPDATE = 3,
  /*
   *d
   */
  OPEN_LOG_REPLICATOR__PB__OP__DELETE = 4,
  /*
   *ddl
   */
  OPEN_LOG_REPLICATOR__PB__OP__DDL = 5,
  /*
   *checkpoint
   */
  OPEN_LOG_REPLICATOR__PB__OP__CHKPT = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__OP)
} OpenLogReplicator__Pb__Op;
typedef enum _OpenLogReplicator__Pb__ColumnType {
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__UNKNOWN = 0,
  /*
   *1
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__VARCHAR2 = 1,
  /*
   *2, FLOAT
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__NUMBER = 2,
  /*
   *8
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__LONG = 3,
  /*
   *12
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__DATE = 4,
  /*
   *23
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__RAW = 5,
  /*
   *24
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__LONG_RAW = 6,
  /*
   *96, NCHAR
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__CHAR = 7,
  /*
   *100
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__BINARY_FLOAT = 8,
  /*
   *101
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__BINARY_DOUBLE = 9,
  /*
   *112, NCLOB
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__CLOB = 10,
  /*
   *113
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__BLOB = 11,
  /*
   *180
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__TIMESTAMP = 12,
  /*
   *181
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__TIMESTAMP_WITH_TZ = 13,
  /*
   *182
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__INTERVAL_YEAR_TO_MONTH = 14,
  /*
   *183
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__INTERVAL_DAY_TO_SECOND = 15,
  /*
   *208
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__UROWID = 16,
  /*
   *231
   */
  OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__TIMESTAMP_WITH_LOCAL_TZ = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE)
} OpenLogReplicator__Pb__ColumnType;
typedef enum _OpenLogReplicator__Pb__RequestCode {
  OPEN_LOG_REPLICATOR__PB__REQUEST_CODE__INFO = 0,
  OPEN_LOG_REPLICATOR__PB__REQUEST_CODE__START = 1,
  OPEN_LOG_REPLICATOR__PB__REQUEST_CODE__CONTINUE = 2,
  OPEN_LOG_REPLICATOR__PB__REQUEST_CODE__CONFIRM = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__REQUEST_CODE)
} OpenLogReplicator__Pb__RequestCode;
typedef enum _OpenLogReplicator__Pb__ResponseCode {
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__READY = 0,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__FAILED_START = 1,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__STARTING = 2,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__ALREADY_STARTED = 3,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__REPLICATE = 4,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__PAYLOAD = 5,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__INVALID_DATABASE = 6,
  OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__INVALID_COMMAND = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE)
} OpenLogReplicator__Pb__ResponseCode;

/* --- messages --- */

typedef enum {
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM_VALUE_INT = 2,
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM_VALUE_FLOAT = 3,
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM_VALUE_DOUBLE = 4,
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM_VALUE_STRING = 5,
  OPEN_LOG_REPLICATOR__PB__VALUE__DATUM_VALUE_BYTES = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__VALUE__DATUM__CASE)
} OpenLogReplicator__Pb__Value__DatumCase;

struct  OpenLogReplicator__Pb__Value
{
  ProtobufCMessage base;
  char *name;
  OpenLogReplicator__Pb__Value__DatumCase datum_case;
  union {
    ProtobufCBinaryData value_bytes;
    double value_double;
    int64_t value_int;
    char *value_string;
    float value_float;
  };
};
#define OPEN_LOG_REPLICATOR__PB__VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__value__descriptor) \
    , (char *)protobuf_c_empty_string, OPEN_LOG_REPLICATOR__PB__VALUE__DATUM__NOT_SET, { {0} } }


struct  OpenLogReplicator__Pb__Column
{
  ProtobufCMessage base;
  char *name;
  OpenLogReplicator__Pb__ColumnType type;
  int32_t length;
  int32_t precision;
  int32_t scale;
  protobuf_c_boolean nullable;
};
#define OPEN_LOG_REPLICATOR__PB__COLUMN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__column__descriptor) \
    , (char *)protobuf_c_empty_string, OPEN_LOG_REPLICATOR__PB__COLUMN_TYPE__UNKNOWN, 0, 0, 0, 0 }


typedef enum {
  OPEN_LOG_REPLICATOR__PB__SCHEMA__TM_VAL__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__SCHEMA__TM_VAL_TM = 4,
  OPEN_LOG_REPLICATOR__PB__SCHEMA__TM_VAL_TMS = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__SCHEMA__TM_VAL__CASE)
} OpenLogReplicator__Pb__Schema__TmValCase;

struct  OpenLogReplicator__Pb__Schema
{
  ProtobufCMessage base;
  char *owner;
  char *name;
  uint32_t obj;
  size_t n_column;
  OpenLogReplicator__Pb__Column **column;
  OpenLogReplicator__Pb__Schema__TmValCase tm_val_case;
  union {
    uint64_t tm;
    char *tms;
  };
};
#define OPEN_LOG_REPLICATOR__PB__SCHEMA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__schema__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL, OPEN_LOG_REPLICATOR__PB__SCHEMA__TM_VAL__NOT_SET, {0} }


struct  OpenLogReplicator__Pb__Payload
{
  ProtobufCMessage base;
  OpenLogReplicator__Pb__Op op;
  OpenLogReplicator__Pb__Schema *schema;
  char *rid;
  size_t n_before;
  OpenLogReplicator__Pb__Value **before;
  size_t n_after;
  OpenLogReplicator__Pb__Value **after;
  char *ddl;
  uint32_t seq;
  uint64_t offset;
  protobuf_c_boolean redo;
  uint64_t num;
};
#define OPEN_LOG_REPLICATOR__PB__PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__payload__descriptor) \
    , OPEN_LOG_REPLICATOR__PB__OP__BEGIN, NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


struct  OpenLogReplicator__Pb__SchemaRequest
{
  ProtobufCMessage base;
  char *mask;
  char *filter;
};
#define OPEN_LOG_REPLICATOR__PB__SCHEMA_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__schema_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


typedef enum {
  OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL_SCN = 3,
  OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL_TMS = 4,
  OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL_TM_REL = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL__CASE)
} OpenLogReplicator__Pb__RedoRequest__TmValCase;

struct  OpenLogReplicator__Pb__RedoRequest
{
  ProtobufCMessage base;
  OpenLogReplicator__Pb__RequestCode code;
  char *database_name;
  uint64_t seq;
  size_t n_schema;
  OpenLogReplicator__Pb__SchemaRequest **schema;
  uint64_t c_scn;
  uint64_t c_idx;
  OpenLogReplicator__Pb__RedoRequest__TmValCase tm_val_case;
  union {
    uint64_t scn;
    int64_t tm_rel;
    char *tms;
  };
};
#define OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__redo_request__descriptor) \
    , OPEN_LOG_REPLICATOR__PB__REQUEST_CODE__INFO, (char *)protobuf_c_empty_string, 0, 0,NULL, 0, 0, OPEN_LOG_REPLICATOR__PB__REDO_REQUEST__TM_VAL__NOT_SET, {0} }


typedef enum {
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__SCN_VAL__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__SCN_VAL_SCN = 2,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__SCN_VAL_SCNS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__SCN_VAL__CASE)
} OpenLogReplicator__Pb__RedoResponse__ScnValCase;

typedef enum {
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__TM_VAL__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__TM_VAL_TM = 4,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__TM_VAL_TMS = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__TM_VAL__CASE)
} OpenLogReplicator__Pb__RedoResponse__TmValCase;

typedef enum {
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__XID_VAL__NOT_SET = 0,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__XID_VAL_XID = 6,
  OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__XID_VAL_XIDN = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__XID_VAL__CASE)
} OpenLogReplicator__Pb__RedoResponse__XidValCase;

struct  OpenLogReplicator__Pb__RedoResponse
{
  ProtobufCMessage base;
  OpenLogReplicator__Pb__ResponseCode code;
  char *db;
  size_t n_payload;
  OpenLogReplicator__Pb__Payload **payload;
  uint64_t c_scn;
  uint64_t c_idx;
  OpenLogReplicator__Pb__RedoResponse__ScnValCase scn_val_case;
  union {
    uint64_t scn;
    char *scns;
  };
  OpenLogReplicator__Pb__RedoResponse__TmValCase tm_val_case;
  union {
    uint64_t tm;
    char *tms;
  };
  OpenLogReplicator__Pb__RedoResponse__XidValCase xid_val_case;
  union {
    uint64_t xidn;
    char *xid;
  };
};
#define OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_log_replicator__pb__redo_response__descriptor) \
    , OPEN_LOG_REPLICATOR__PB__RESPONSE_CODE__READY, (char *)protobuf_c_empty_string, 0,NULL, 0, 0, OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__SCN_VAL__NOT_SET, {0}, OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__TM_VAL__NOT_SET, {0}, OPEN_LOG_REPLICATOR__PB__REDO_RESPONSE__XID_VAL__NOT_SET, {0} }


/* OpenLogReplicator__Pb__Value methods */
void   open_log_replicator__pb__value__init
                     (OpenLogReplicator__Pb__Value         *message);
size_t open_log_replicator__pb__value__get_packed_size
                     (const OpenLogReplicator__Pb__Value   *message);
size_t open_log_replicator__pb__value__pack
                     (const OpenLogReplicator__Pb__Value   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__value__pack_to_buffer
                     (const OpenLogReplicator__Pb__Value   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__Value *
       open_log_replicator__pb__value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__value__free_unpacked
                     (OpenLogReplicator__Pb__Value *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__Column methods */
void   open_log_replicator__pb__column__init
                     (OpenLogReplicator__Pb__Column         *message);
size_t open_log_replicator__pb__column__get_packed_size
                     (const OpenLogReplicator__Pb__Column   *message);
size_t open_log_replicator__pb__column__pack
                     (const OpenLogReplicator__Pb__Column   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__column__pack_to_buffer
                     (const OpenLogReplicator__Pb__Column   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__Column *
       open_log_replicator__pb__column__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__column__free_unpacked
                     (OpenLogReplicator__Pb__Column *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__Schema methods */
void   open_log_replicator__pb__schema__init
                     (OpenLogReplicator__Pb__Schema         *message);
size_t open_log_replicator__pb__schema__get_packed_size
                     (const OpenLogReplicator__Pb__Schema   *message);
size_t open_log_replicator__pb__schema__pack
                     (const OpenLogReplicator__Pb__Schema   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__schema__pack_to_buffer
                     (const OpenLogReplicator__Pb__Schema   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__Schema *
       open_log_replicator__pb__schema__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__schema__free_unpacked
                     (OpenLogReplicator__Pb__Schema *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__Payload methods */
void   open_log_replicator__pb__payload__init
                     (OpenLogReplicator__Pb__Payload         *message);
size_t open_log_replicator__pb__payload__get_packed_size
                     (const OpenLogReplicator__Pb__Payload   *message);
size_t open_log_replicator__pb__payload__pack
                     (const OpenLogReplicator__Pb__Payload   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__payload__pack_to_buffer
                     (const OpenLogReplicator__Pb__Payload   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__Payload *
       open_log_replicator__pb__payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__payload__free_unpacked
                     (OpenLogReplicator__Pb__Payload *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__SchemaRequest methods */
void   open_log_replicator__pb__schema_request__init
                     (OpenLogReplicator__Pb__SchemaRequest         *message);
size_t open_log_replicator__pb__schema_request__get_packed_size
                     (const OpenLogReplicator__Pb__SchemaRequest   *message);
size_t open_log_replicator__pb__schema_request__pack
                     (const OpenLogReplicator__Pb__SchemaRequest   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__schema_request__pack_to_buffer
                     (const OpenLogReplicator__Pb__SchemaRequest   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__SchemaRequest *
       open_log_replicator__pb__schema_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__schema_request__free_unpacked
                     (OpenLogReplicator__Pb__SchemaRequest *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__RedoRequest methods */
void   open_log_replicator__pb__redo_request__init
                     (OpenLogReplicator__Pb__RedoRequest         *message);
size_t open_log_replicator__pb__redo_request__get_packed_size
                     (const OpenLogReplicator__Pb__RedoRequest   *message);
size_t open_log_replicator__pb__redo_request__pack
                     (const OpenLogReplicator__Pb__RedoRequest   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__redo_request__pack_to_buffer
                     (const OpenLogReplicator__Pb__RedoRequest   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__RedoRequest *
       open_log_replicator__pb__redo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__redo_request__free_unpacked
                     (OpenLogReplicator__Pb__RedoRequest *message,
                      ProtobufCAllocator *allocator);
/* OpenLogReplicator__Pb__RedoResponse methods */
void   open_log_replicator__pb__redo_response__init
                     (OpenLogReplicator__Pb__RedoResponse         *message);
size_t open_log_replicator__pb__redo_response__get_packed_size
                     (const OpenLogReplicator__Pb__RedoResponse   *message);
size_t open_log_replicator__pb__redo_response__pack
                     (const OpenLogReplicator__Pb__RedoResponse   *message,
                      uint8_t             *out);
size_t open_log_replicator__pb__redo_response__pack_to_buffer
                     (const OpenLogReplicator__Pb__RedoResponse   *message,
                      ProtobufCBuffer     *buffer);
OpenLogReplicator__Pb__RedoResponse *
       open_log_replicator__pb__redo_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_log_replicator__pb__redo_response__free_unpacked
                     (OpenLogReplicator__Pb__RedoResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*OpenLogReplicator__Pb__Value_Closure)
                 (const OpenLogReplicator__Pb__Value *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__Column_Closure)
                 (const OpenLogReplicator__Pb__Column *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__Schema_Closure)
                 (const OpenLogReplicator__Pb__Schema *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__Payload_Closure)
                 (const OpenLogReplicator__Pb__Payload *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__SchemaRequest_Closure)
                 (const OpenLogReplicator__Pb__SchemaRequest *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__RedoRequest_Closure)
                 (const OpenLogReplicator__Pb__RedoRequest *message,
                  void *closure_data);
typedef void (*OpenLogReplicator__Pb__RedoResponse_Closure)
                 (const OpenLogReplicator__Pb__RedoResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct OpenLogReplicator__Pb__OpenLogReplicator_Service OpenLogReplicator__Pb__OpenLogReplicator_Service;
struct OpenLogReplicator__Pb__OpenLogReplicator_Service
{
  ProtobufCService base;
  void (*redo)(OpenLogReplicator__Pb__OpenLogReplicator_Service *service,
               const OpenLogReplicator__Pb__RedoRequest *input,
               OpenLogReplicator__Pb__RedoResponse_Closure closure,
               void *closure_data);
};
typedef void (*OpenLogReplicator__Pb__OpenLogReplicator_ServiceDestroy)(OpenLogReplicator__Pb__OpenLogReplicator_Service *);
void open_log_replicator__pb__open_log_replicator__init (OpenLogReplicator__Pb__OpenLogReplicator_Service *service,
                                                         OpenLogReplicator__Pb__OpenLogReplicator_ServiceDestroy destroy);
#define OPEN_LOG_REPLICATOR__PB__OPEN_LOG_REPLICATOR__BASE_INIT \
    { &open_log_replicator__pb__open_log_replicator__descriptor, protobuf_c_service_invoke_internal, NULL }
#define OPEN_LOG_REPLICATOR__PB__OPEN_LOG_REPLICATOR__INIT(function_prefix__) \
    { OPEN_LOG_REPLICATOR__PB__OPEN_LOG_REPLICATOR__BASE_INIT,\
      function_prefix__ ## redo  }
void open_log_replicator__pb__open_log_replicator__redo(ProtobufCService *service,
                                                        const OpenLogReplicator__Pb__RedoRequest *input,
                                                        OpenLogReplicator__Pb__RedoResponse_Closure closure,
                                                        void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    open_log_replicator__pb__op__descriptor;
extern const ProtobufCEnumDescriptor    open_log_replicator__pb__column_type__descriptor;
extern const ProtobufCEnumDescriptor    open_log_replicator__pb__request_code__descriptor;
extern const ProtobufCEnumDescriptor    open_log_replicator__pb__response_code__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__value__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__column__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__schema__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__payload__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__schema_request__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__redo_request__descriptor;
extern const ProtobufCMessageDescriptor open_log_replicator__pb__redo_response__descriptor;
extern const ProtobufCServiceDescriptor open_log_replicator__pb__open_log_replicator__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_OraProtoBuf_2eproto__INCLUDED */
